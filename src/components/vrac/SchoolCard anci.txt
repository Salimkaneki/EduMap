"use client";

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

// Interface mise à jour pour correspondre à la structure de l'API
interface Etablissement {
  id: number;
  nom_etablissement: string;
  libelle_type_statut_etab: string;  // Type (Public, Privé, etc.)
  region: string;                    // Location
  prefecture: string;
  libelle_type_systeme: string;      // Niveau (Primaire, Secondaire, etc.)
  libelle_type_milieu: string;       // Rural/Urbain
  existe_elect: boolean;
  existe_latrine: boolean;
  existe_latrine_fonct: boolean;
  acces_toute_saison: boolean;
  eau: boolean;
  // Champs additionnels pour la page détaillée
  code_etablissement?: string;
  canton_village_autonome?: string;
  ville_village_quartier?: string;
  latitude?: string;
  longitude?: string;
  sommedenb_eff_g?: number;  // Effectif garçons
  sommedenb_eff_f?: number;  // Effectif filles
  tot?: number;              // Total élèves
  sommedenb_ens_h?: number;  // Enseignants hommes
  sommedenb_ens_f?: number;  // Enseignants femmes
  total_ense?: number;       // Total enseignants
}

// Composant pour afficher une carte d'établissement
const ModernSchoolCard = ({ etablissement }: { etablissement: Etablissement }) => {
  const router = useRouter();

  const handleClick = () => {
    router.push(`/schools/${etablissement.id}`);
  };

  // Fonction pour déterminer la couleur du badge selon le type d'établissement
  const getBadgeClass = (type: string) => {
    if (type.includes("public") || type.includes("Public")) {
      return "bg-green-100 text-green-800";
    }
    if (type.includes("privé laïc") || type.includes("Privé Laïc")) {
      return "bg-blue-100 text-blue-800";
    }
    if (type.includes("confessionnel protestant") || type.includes("Protestant")) {
      return "bg-purple-100 text-purple-800";
    }
    if (type.includes("catholique") || type.includes("Catholique")) {
      return "bg-indigo-100 text-indigo-800";
    }
    return "bg-orange-100 text-orange-800";
  };

  // Calcul d'un "score" pour simuler un système de notation
  // Basé sur les infrastructures disponibles
  const calculateFacilityScore = () => {
    let score = 3.0; // Score de base
    if (etablissement.existe_elect) score += 0.5;
    if (etablissement.existe_latrine) score += 0.3;
    if (etablissement.existe_latrine_fonct) score += 0.3;
    if (etablissement.acces_toute_saison) score += 0.4;
    if (etablissement.eau) score += 0.5;
    
    // S'assurer que le score est entre 1 et 5
    return Math.max(1, Math.min(5, score));
  };

  // Générer un nombre fictif d'avis basé sur l'ID
  const generateReviewCount = (id: number) => {
    return 30 + (id % 100);
  };

  const rating = calculateFacilityScore();
  const reviewCount = generateReviewCount(etablissement.id);

  return (
    <div className="group cursor-pointer" onClick={handleClick}>
      {/* Placeholder coloré pour l'image */}
      <div className="relative aspect-[4/3] rounded-xl overflow-hidden mb-3 bg-gradient-to-br from-gray-200 to-gray-300">
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="w-16 h-16 rounded-full bg-white/90 flex items-center justify-center">
            <span className="text-2xl font-bold text-gray-800">
              {etablissement.nom_etablissement.substring(0, 2)}
            </span>
          </div>
        </div>
        <div className="absolute top-3 left-3">
          <span className={`px-2 py-1 rounded-lg text-xs font-medium ${getBadgeClass(etablissement.libelle_type_statut_etab)}`}>
            {etablissement.libelle_type_statut_etab}
          </span>
        </div>
      </div>

      {/* Informations de l'établissement */}
      <div>
        <div className="flex items-center justify-between">
          <h3 className="font-semibold text-gray-900 group-hover:text-blue-600 transition-colors line-clamp-1">
            {etablissement.nom_etablissement}
          </h3>
        </div>
        
        <div className="flex items-center mt-1">
          <span className="text-sm text-gray-500">{etablissement.region}</span>
          <span className="mx-1 text-gray-400">•</span>
          <span className="text-sm text-gray-500">{etablissement.libelle_type_systeme}</span>
        </div>
        
        <div className="flex items-center mt-1">
          <svg 
            className="w-4 h-4 text-yellow-400"
            fill="currentColor" 
            viewBox="0 0 20 20"
          >
            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
          </svg>
          <span className="ml-1 text-sm text-gray-700">{rating.toFixed(1)}</span>
          <span className="mx-1 text-gray-400">•</span>
          <span className="text-sm text-gray-500">{reviewCount} avis</span>
        </div>
      </div>
    </div>
  );
};

// Composant principal qui affiche la grille de cartes
const ModernSchoolsGrid = () => {
  const [etablissements, setEtablissements] = useState<Etablissement[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [totalPages, setTotalPages] = useState<number>(1);
  const [searchParams, setSearchParams] = useState({
    region: '',
    libelle_type_milieu: '',
    libelle_type_statut_etab: '',
    libelle_type_systeme: ''
  });

  // URL de l'API déployée
  const API_URL = 'https://edumap.edufyplus.com/api';

  // Récupérer les établissements
  useEffect(() => {
    fetchEtablissements();
  }, [currentPage, searchParams]);

  const fetchEtablissements = async () => {
    setLoading(true);
    try {
      // Construire l'URL avec les paramètres de recherche
      let url = `${API_URL}/etablissements?page=${currentPage}&per_page=8`;
      
      // Ajouter les paramètres de recherche si définis
      Object.entries(searchParams).forEach(([key, value]) => {
        if (value) {
          url += `&${key}=${encodeURIComponent(value)}`;
        }
      });
      
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }
      
      const data = await response.json();
      
      // Si c'est la première page, remplacer les établissements
      // Sinon, ajouter les nouveaux établissements à la suite des existants
      if (currentPage === 1) {
        setEtablissements(data.data);
      } else {
        setEtablissements(prevEtablissements => [...prevEtablissements, ...data.data]);
      }
      
      setTotalPages(Math.ceil(data.total / data.per_page));
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Une erreur est survenue lors de la connexion à l\'API';
      setError(errorMessage);
      console.error('Erreur lors du chargement des établissements:', err);
    } finally {
      setLoading(false);
    }
  };

  // Pour charger plus d'établissements
  const handleLoadMore = () => {
    if (currentPage < totalPages) {
      setCurrentPage(prev => prev + 1);
    }
  };

  // Pour effectuer une recherche
  const handleSearch = (params: any) => {
    setSearchParams({...searchParams, ...params});
    setCurrentPage(1); // Retour à la première page lors d'une nouvelle recherche
  };

  // Ajout d'un composant pour les filtres
  const FilterBar = () => {
    const [region, setRegion] = useState(searchParams.region);
    const [typeEtab, setTypeEtab] = useState(searchParams.libelle_type_statut_etab);
    const [systeme, setSysteme] = useState(searchParams.libelle_type_systeme);
    const [milieu, setMilieu] = useState(searchParams.libelle_type_milieu);

    const handleSubmit = (e: React.FormEvent) => {
      e.preventDefault();
      handleSearch({
        region,
        libelle_type_statut_etab: typeEtab,
        libelle_type_systeme: systeme,
        libelle_type_milieu: milieu
      });
    };

    return (
      <form onSubmit={handleSubmit} className="mb-6 p-4 bg-gray-50 rounded-lg">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Région</label>
            <input
              type="text"
              value={region}
              onChange={(e) => setRegion(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-md"
              placeholder="Toutes les régions"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Type d'établissement</label>
            <select
              value={typeEtab}
              onChange={(e) => setTypeEtab(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-md"
            >
              <option value="">Tous types</option>
              <option value="Public">Public</option>
              <option value="Privé Laïc">Privé Laïc</option>
              <option value="Privé Confessionnel Catholique">Privé Confessionnel Catholique</option>
              <option value="Privé Confessionnel Protestant">Privé Confessionnel Protestant</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Niveau</label>
            <select
              value={systeme}
              onChange={(e) => setSysteme(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-md"
            >
              <option value="">Tous niveaux</option>
              <option value="Primaire">Primaire</option>
              <option value="Secondaire">Secondaire</option>
              <option value="Préscolaire">Préscolaire</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Milieu</label>
            <select
              value={milieu}
              onChange={(e) => setMilieu(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-md"
            >
              <option value="">Tous milieux</option>
              <option value="Urbain">Urbain</option>
              <option value="Rural">Rural</option>
            </select>
          </div>
        </div>
        <div className="flex justify-end mt-4">
          <button
            type="button"
            onClick={() => {
              setRegion('');
              setTypeEtab('');
              setSysteme('');
              setMilieu('');
              handleSearch({
                region: '',
                libelle_type_statut_etab: '',
                libelle_type_systeme: '',
                libelle_type_milieu: ''
              });
            }}
            className="px-4 py-2 mr-2 text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
          >
            Réinitialiser
          </button>
          <button
            type="submit"
            className="px-4 py-2 text-white bg-blue-600 rounded-md hover:bg-blue-700"
          >
            Filtrer
          </button>
        </div>
      </form>
    );
  };

  return (
    <div className="bg-white py-12 px-4">
      <div className="max-w-7xl mx-auto">
        {/* En-tête avec titre */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold text-gray-900">Établissements scolaires</h2>
          <p className="text-gray-600 mt-2">
            Découvrez les établissements scolaires au Togo et leurs infrastructures
          </p>
        </div>
        
        {/* Barre de filtres */}
        <FilterBar />
        
        {/* Message d'erreur */}
        {error && (
          <div className="bg-red-100 text-red-700 p-4 rounded-lg mb-6">
            {error}
          </div>
        )}
        
        {/* État de chargement initial */}
        {loading && etablissements.length === 0 && (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          </div>
        )}
        
        {/* Grille d'établissements */}
        {etablissements.length > 0 && (
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {etablissements.map(etablissement => (
              <ModernSchoolCard key={etablissement.id} etablissement={etablissement} />
            ))}
          </div>
        )}
        
        {/* Message si aucun résultat */}
        {!loading && etablissements.length === 0 && (
          <div className="text-center py-12">
            <p className="text-lg text-gray-600">Aucun établissement trouvé avec ces critères</p>
            <button 
              onClick={() => handleSearch({})}
              className="mt-4 text-blue-600 hover:text-blue-800 font-medium"
            >
              Réinitialiser les filtres
            </button>
          </div>
        )}
        
        {/* Bouton "Afficher plus" avec indicateur de chargement */}
        {currentPage < totalPages && (
          <div className="flex justify-center mt-10">
            <button 
              onClick={handleLoadMore}
              disabled={loading && currentPage > 1}
              className="flex items-center bg-white border border-gray-300 rounded-full px-6 py-3 text-gray-800 font-medium hover:shadow-md transition-shadow disabled:opacity-70"
            >
              {loading && currentPage > 1 ? (
                <>
                  <div className="animate-spin h-5 w-5 mr-2 border-2 border-blue-500 border-t-transparent rounded-full"></div>
                  Chargement...
                </>
              ) : (
                <>
                  Afficher plus
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                  </svg>
                </>
              )}
            </button>
          </div>
        )}
      </div>
    </div>
  );   
};

export default ModernSchoolsGrid;