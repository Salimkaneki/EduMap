"use client";

import React, { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';

// Interface pour les détails d'un établissement
interface EtablissementDetail {
  id: number;
  nom_etablissement: string;
  code_etablissement: string;
  libelle_type_statut_etab: string;  // Type (Public, Privé, etc.)
  region: string;
  prefecture: string;
  canton_village_autonome: string;
  ville_village_quartier: string;
  libelle_type_systeme: string;      // Niveau (Primaire, Secondaire, etc.)
  libelle_type_milieu: string;       // Rural/Urbain
  existe_elect: boolean;
  existe_latrine: boolean;
  existe_latrine_fonct: boolean;
  acces_toute_saison: boolean;
  eau: boolean;
  latitude: string;
  longitude: string;
  sommedenb_eff_g: number;  // Effectif garçons
  sommedenb_eff_f: number;  // Effectif filles
  tot: number;              // Total élèves
  sommedenb_ens_h: number;  // Enseignants hommes
  sommedenb_ens_f: number;  // Enseignants femmes
  total_ense: number;       // Total enseignants
  sommedenb_salles_classes_dur?: number;
  sommedenb_salles_classes_banco?: number;
  sommedenb_salles_classes_autre?: number;
}

const SchoolDetailPage = () => {
  const params = useParams();
  const router = useRouter();
  const [etablissement, setEtablissement] = useState<EtablissementDetail | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  // URL de l'API local
  const API_URL = 'http://localhost:8000/api';

  useEffect(() => {
    const fetchEtablissementDetail = async () => {
      if (!params.id) return;
      
      setLoading(true);
      try {
        const response = await fetch(`${API_URL}/etablissements/${params.id}`);
        
        if (!response.ok) {
          throw new Error('Erreur lors de la récupération des détails de l\'établissement');
        }
        
        const data = await response.json();
        setEtablissement(data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Une erreur est survenue');
        console.error('Erreur lors du chargement des détails:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchEtablissementDetail();
  }, [params.id]);

  // Fonction pour obtenir la couleur du badge selon le type d'établissement
  const getBadgeClass = (type: string) => {
    if (type.includes("public") || type.includes("Public")) {
      return "bg-green-100 text-green-800";
    }
    if (type.includes("privé laïc") || type.includes("Privé Laïc")) {
      return "bg-blue-100 text-blue-800";
    }
    if (type.includes("confessionnel protestant") || type.includes("Protestant")) {
      return "bg-purple-100 text-purple-800";
    }
    if (type.includes("catholique") || type.includes("Catholique")) {
      return "bg-indigo-100 text-indigo-800";
    }
    return "bg-orange-100 text-orange-800";
  };

  // Calcul d'un "score" pour simuler un système de notation
  const calculateFacilityScore = (etablissement: EtablissementDetail) => {
    let score = 3.0; // Score de base
    if (etablissement.existe_elect) score += 0.5;
    if (etablissement.existe_latrine) score += 0.3;
    if (etablissement.existe_latrine_fonct) score += 0.3;
    if (etablissement.acces_toute_saison) score += 0.4;
    if (etablissement.eau) score += 0.5;
    
    // S'assurer que le score est entre 1 et 5
    return Math.max(1, Math.min(5, score));
  };

  // Générer un nombre fictif d'avis basé sur l'ID
  const generateReviewCount = (id: number) => {
    return 30 + (id % 100);
  };

  // Afficher un indicateur de chargement
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 pt-16 pb-12 px-4 sm:px-6 lg:px-8 flex flex-col justify-center items-center">
        <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500 mb-4"></div>
        <h2 className="text-xl font-medium text-gray-700">Chargement des détails...</h2>
      </div>
    );
  }

  // Afficher un message d'erreur
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 pt-16 pb-12 px-4 sm:px-6 lg:px-8 flex flex-col justify-center items-center">
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative max-w-lg w-full" role="alert">
          <strong className="font-bold">Erreur : </strong>
          <span className="block sm:inline">{error}</span>
        </div>
        <button 
          onClick={() => router.push('/schools')}
          className="mt-6 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded transition-colors"
        >
          Retourner à la liste des établissements
        </button>
      </div>
    );
  }

  // Si les données ne sont pas disponibles
  if (!etablissement) {
    return (
      <div className="min-h-screen bg-gray-50 pt-16 pb-12 px-4 sm:px-6 lg:px-8 flex flex-col justify-center items-center">
        <h2 className="text-xl font-medium text-gray-700">Établissement non trouvé</h2>
        <button 
          onClick={() => router.push('/schools')}
          className="mt-6 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded transition-colors"
        >
          Retourner à la liste des établissements
        </button>
      </div>
    );
  }

  const rating = calculateFacilityScore(etablissement);
  const reviewCount = generateReviewCount(etablissement.id);

  return (
    <div className="bg-gray-50 min-h-screen">
      {/* Header avec bouton retour */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center">
            <button
              onClick={() => router.back()}
              className="mr-4 p-2 rounded-full hover:bg-gray-100 transition-colors"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clipRule="evenodd" />
              </svg>
            </button>
            <h1 className="text-xl font-bold text-gray-900 truncate">
              {etablissement.nom_etablissement}
            </h1>
          </div>
        </div>
      </div>

      <main className="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {/* En-tête avec information principale */}
          <div className="px-6 py-6 border-b border-gray-200">
            <div className="flex flex-col md:flex-row md:items-center justify-between">
              <div>
                <div className="flex items-center">
                  <h2 className="text-2xl font-bold text-gray-900">{etablissement.nom_etablissement}</h2>
                  <span className={`ml-3 px-2.5 py-1 rounded-lg text-xs font-medium ${getBadgeClass(etablissement.libelle_type_statut_etab)}`}>
                    {etablissement.libelle_type_statut_etab}
                  </span>
                </div>
                
                <div className="flex items-center mt-2 text-sm text-gray-600">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  {etablissement.ville_village_quartier}, {etablissement.prefecture}, {etablissement.region}
                </div>
                
                <div className="flex items-center mt-1 text-sm text-gray-600">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                  </svg>
                  {etablissement.libelle_type_systeme} • {etablissement.libelle_type_milieu}
                </div>
              </div>
              
              <div className="mt-4 md:mt-0 flex flex-col items-end">
                <div className="flex items-center">
                  <div className="flex items-center">
                    {[...Array(5)].map((_, i) => (
                      <svg 
                        key={i}
                        className={`w-5 h-5 ${i < Math.floor(rating) ? 'text-yellow-400' : 'text-gray-300'}`}
                        fill="currentColor" 
                        viewBox="0 0 20 20"
                      >
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                      </svg>
                    ))}
                  </div>
                  <span className="ml-2 text-gray-700 font-medium">{rating.toFixed(1)}</span>
                </div>
                <span className="text-sm text-gray-500 mt-1">{reviewCount} avis</span>
                <span className="text-xs text-gray-400 mt-1">Code: {etablissement.code_etablissement}</span>
              </div>
            </div>
          </div>

          {/* Statistiques principales */}
          <div className="px-6 py-5 border-b border-gray-200 bg-gray-50">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-white p-4 rounded-lg shadow-sm">
                <h3 className="text-sm font-medium text-gray-500">Élèves</h3>
                <div className="mt-2 flex items-baseline justify-between">
                  <div className="text-2xl font-semibold text-gray-900">{etablissement.tot || 0}</div>
                  <div className="flex flex-col text-xs text-right">
                    <span className="text-blue-600">{etablissement.sommedenb_eff_g || 0} garçons</span>
                    <span className="text-pink-600">{etablissement.sommedenb_eff_f || 0} filles</span>
                  </div>
                </div>
              </div>
              
              <div className="bg-white p-4 rounded-lg shadow-sm">
                <h3 className="text-sm font-medium text-gray-500">Enseignants</h3>
                <div className="mt-2 flex items-baseline justify-between">
                  <div className="text-2xl font-semibold text-gray-900">{etablissement.total_ense || 0}</div>
                  <div className="flex flex-col text-xs text-right">
                    <span className="text-blue-600">{etablissement.sommedenb_ens_h || 0} hommes</span>
                    <span className="text-pink-600">{etablissement.sommedenb_ens_f || 0} femmes</span>
                  </div>
                </div>
              </div>
              
              <div className="bg-white p-4 rounded-lg shadow-sm">
                <h3 className="text-sm font-medium text-gray-500">Ratio élèves/enseignant</h3>
                <div className="mt-2 flex items-baseline">
                  <div className="text-2xl font-semibold text-gray-900">
                    {etablissement.total_ense ? Math.round(etablissement.tot / etablissement.total_ense) : 'N/A'}
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Infrastructures */}
          <div className="px-6 py-5 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Infrastructures</h3>
            
            <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
              <div className={`p-4 rounded-lg ${etablissement.existe_elect ? 'bg-green-50 text-green-800' : 'bg-gray-50 text-gray-500'}`}>
                <div className="flex justify-center mb-2">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                </div>
                <div className="text-center text-sm font-medium">Électricité</div>
              </div>
              
              <div className={`p-4 rounded-lg ${etablissement.eau ? 'bg-blue-50 text-blue-800' : 'bg-gray-50 text-gray-500'}`}>
                <div className="flex justify-center mb-2">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
                  </svg>
                </div>
                <div className="text-center text-sm font-medium">Eau</div>
              </div>
              
              <div className={`p-4 rounded-lg ${etablissement.existe_latrine ? 'bg-purple-50 text-purple-800' : 'bg-gray-50 text-gray-500'}`}>
                <div className="flex justify-center mb-2">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                  </svg>
                </div>
                <div className="text-center text-sm font-medium">Latrines</div>
                {etablissement.existe_latrine && (
                  <div className="text-center text-xs mt-1">
                    {etablissement.existe_latrine_fonct ? 'Fonctionnelles' : 'Non fonctionnelles'}
                  </div>
                )}
              </div>
              
              <div className={`p-4 rounded-lg ${etablissement.acces_toute_saison ? 'bg-amber-50 text-amber-800' : 'bg-gray-50 text-gray-500'}`}>
                <div className="flex justify-center mb-2">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                  </svg>
                </div>
                <div className="text-center text-sm font-medium">Accès</div>
                <div className="text-center text-xs mt-1">
                  {etablissement.acces_toute_saison ? 'Toute saison' : 'Saisonnier'}
                </div>
              </div>
              
              <div className="p-4 rounded-lg bg-gray-50">
                <div className="flex justify-center mb-2">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                  </svg>
                </div>
                <div className="text-center text-sm font-medium">Classes</div>
                <div className="text-center text-xs mt-1">
                  {(etablissement.sommedenb_salles_classes_dur || 0) + 
                   (etablissement.sommedenb_salles_classes_banco || 0) + 
                   (etablissement.sommedenb_salles_classes_autre || 0)} au total
                </div>
              </div>
            </div>
          </div>

          {/* Emplacement */}
          <div className="px-6 py-5">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Emplacement</h3>
            
            {etablissement.latitude && etablissement.longitude ? (
              <div className="bg-gray-100 rounded-lg h-64 flex items-center justify-center">
                {/* Ici vous pourriez intégrer une carte avec les coordonnées */}
                <div className="text-center">
                  <div className="text-gray-600">
                    Coordonnées GPS: {etablissement.latitude}, {etablissement.longitude}
                  </div>
                  <div className="mt-2">
                    <a 
                      href={`https://www.google.com/maps?q=${etablissement.latitude},${etablissement.longitude}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    >
                      Voir sur Google Maps
                    </a>
                  </div>
                </div>
              </div>
            ) : (
              <div className="bg-gray-100 rounded-lg h-64 flex items-center justify-center">
                <span className="text-gray-500">Aucune coordonnée GPS disponible</span>
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
};

export default SchoolDetailPage;