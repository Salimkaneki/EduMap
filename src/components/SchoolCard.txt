"use client";

import React, { useState, useEffect } from 'react';
import axios from 'axios';

// Interface pour les données d'établissement provenant de l'API
interface Etablissement {
  id: number;
  nom_etablissement: string;
  libelle_type_statut_etab: string;
  region: string;
  prefecture: string;
  // Autres champs de l'API si nécessaire
}

// Interface adaptée pour notre composant carte
interface School {
  id: number;
  name: string;
  type: string;
  location: string;
  level: string;
  rating?: number;  // Optionnel car peut ne pas être dans l'API
  reviews?: number; // Optionnel car peut ne pas être dans l'API
}

// Composant pour une carte d'établissement style Airbnb
const ModernSchoolCard = ({ school }: { school: School }) => {
  return (
    <div className="group cursor-pointer">
      {/* Placeholder coloré pour l'image */}
      <div className="relative aspect-[4/3] rounded-xl overflow-hidden mb-3 bg-gradient-to-br from-gray-200 to-gray-300">
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="w-16 h-16 rounded-full bg-white/90 flex items-center justify-center">
            <span className="text-2xl font-bold text-gray-800">{school.name.substring(0, 2)}</span>
          </div>
        </div>
        <div className="absolute top-3 left-3">
          <span className={`px-2 py-1 rounded-lg text-xs font-medium ${
            school.type === "Public" ? "bg-green-100 text-green-800" :
            school.type.includes("Laïc") ? "bg-blue-100 text-blue-800" :
            school.type.includes("Protestant") ? "bg-purple-100 text-purple-800" :
            school.type.includes("Catholique") ? "bg-indigo-100 text-indigo-800" :
            "bg-orange-100 text-orange-800"
          }`}>
            {school.type}
          </span>
        </div>
      </div>

      {/* Informations de l'établissement */}
      <div>
        <div className="flex items-center justify-between">
          <h3 className="font-semibold text-gray-900 group-hover:text-blue-600 transition-colors line-clamp-1">{school.name}</h3>
        </div>
        
        <div className="flex items-center mt-1">
          <span className="text-sm text-gray-500">{school.location}</span>
          {school.level && (
            <>
              <span className="mx-1 text-gray-400">•</span>
              <span className="text-sm text-gray-500">{school.level}</span>
            </>
          )}
        </div>
        
        {(school.rating !== undefined && school.reviews !== undefined) && (
          <div className="flex items-center mt-1">
            <svg 
              className="w-4 h-4 text-yellow-400"
              fill="currentColor" 
              viewBox="0 0 20 20"
            >
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
            </svg>
            <span className="ml-1 text-sm text-gray-700">{school.rating.toFixed(1)}</span>
            <span className="mx-1 text-gray-400">•</span>
            <span className="text-sm text-gray-500">{school.reviews} avis</span>
          </div>
        )}
      </div>
    </div>
  );
};

// Composant principal qui affiche la grille de cartes
const ModernSchoolsGrid = () => {
  const [schools, setSchools] = useState<School[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [totalPages, setTotalPages] = useState<number>(1);

  // Fonction pour charger les données depuis l'API
  const fetchSchools = async (page: number = 1) => {
    setLoading(true);
    try {
      const response = await axios.get(`http://localhost:8000/api/etablissements?page=${page}&per_page=8`);
      
      // Adapter les données de l'API au format attendu par le composant
      const formattedSchools: School[] = response.data.data.map((etablissement: Etablissement) => ({
        id: etablissement.id,
        name: etablissement.nom_etablissement,
        type: etablissement.libelle_type_statut_etab,
        location: etablissement.region,
        level: etablissement.prefecture, // Ou autre champ plus approprié de votre API
        // Les champs rating et reviews sont omis car ils n'existent pas dans l'API
      }));
      
      setSchools(formattedSchools);
      setTotalPages(response.data.last_page || 1);
      setError(null);
    } catch (err) {
      console.error("Erreur lors de la récupération des établissements:", err);
      setError("Impossible de charger les établissements. Veuillez réessayer plus tard.");
    } finally {
      setLoading(false);
    }
  };

  // Charger les données au montage du composant
  useEffect(() => {
    fetchSchools();
  }, []);

  // Fonction pour charger plus d'établissements
  const loadMoreSchools = () => {
    if (currentPage < totalPages) {
      setCurrentPage(prev => prev + 1);
      fetchSchools(currentPage + 1);
    }
  };

  return (
    <div className="bg-white py-12 px-4">
      <div className="max-w-7xl mx-auto">
        <div className="flex items-center justify-between mb-8">
          <h2 className="text-2xl font-bold text-gray-900">Établissements scolaires</h2>
          <button className="text-blue-600 hover:text-blue-800 font-medium flex items-center transition-colors">
            Tout voir
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
            </svg>
          </button>
        </div>
        
        {loading && schools.length === 0 ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          </div>
        ) : error ? (
          <div className="bg-red-50 p-4 rounded-md">
            <p className="text-red-700">{error}</p>
          </div>
        ) : (
          <>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-3 lg:grid-cols-4 gap-6">
              {schools.map(school => (
                <ModernSchoolCard key={school.id} school={school} />
              ))}
            </div>
            
            {currentPage < totalPages && (
              <div className="flex justify-center mt-10">
                <button 
                  onClick={loadMoreSchools}
                  className="flex items-center bg-white border border-gray-300 rounded-full px-6 py-3 text-gray-800 font-medium hover:shadow-md transition-shadow"
                >
                  Afficher plus
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                  </svg>
                </button>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );   
};

export default ModernSchoolsGrid;